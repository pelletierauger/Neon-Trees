let DNA = function() {
    this.initialEnergy = 30;
    this.energyLoss = 0.9;
    this.branchGrowth = 0.1;
    this.branchGrowthCost = 0.01;
    this.branchingAngle = Math.PI * 0.25;
    this.branchingCost = 0.02;
    this.branchingProbability = 0.06;
    this.branchingFrequencyLeft = 12;
    this.branchingFrequencyRight = 6;
    this.branchingOffsetLeft = 3;
    this.branchingOffsetRight = 0;
};

newGeneration = function() {
    scene.trees = [];
    map = function(n, start1, stop1, start2, stop2) {
        return (n - start1) / (stop1 - start1) * (stop2 - start2) + start2;
    };
    let seed = [];
    for (let i = 0; i < 6; i++) {
        seed.push([
            Math.floor(Math.random()*12+6),
            Math.floor(Math.random()*12+6),
            Math.random() * 0.04,
            Math.random(),
            map(Math.random(),0,1,0,75)
        ]);
    }
    let seedString = `seed = [`;
    for (let i = 0; i < seed.length; i++) {
        let s = seed[i];
        let comma = (i < seed.length - 1) ? `,\n` : ``;
        seedString += `[${s[0]}, ${s[1]}, ${s[2]}, ${s[3]}, ${s[4]}]${comma}`;
    }
    seedString += `];`;
    console.log(seedString);
//     seed = [[13, 17, 0.014471058684451945, 0.12085547541756614, 57.651159206601456],
// [17, 17, 0.011548999824151479, 0.17020371444778282, 64.14436790604552],
// [9, 7, 0.0390176025322112, 0.9367582695176915, 36.03622451126082],
// [12, 6, 0.006811973300440384, 0.762713084975229, 58.65483113845787],
// [6, 15, 0.02660458353299419, 0.324828435493022, 11.281697880483549],
// [14, 6, 0.0010549376885739205, 0.5345165346196015, 2.4279222716515783]];
//     seed = [[15, 14, 0.021469909292202678, 0.279834681991594, 47.820435248156194],
// [7, 13, 0.026132602809898577, 0.024022336435721048, 32.072586330132225],
// [14, 6, 0.031105125009764915, 0.7689861084583778, 40.5928649333697],
// [15, 17, 0.0020410913870943493, 0.11803626988981608, 63.75542627201376],
// [9, 16, 0.03828590215238152, 0.2773724457122191, 27.570290714987195],
// [7, 14, 0.016820014362634802, 0.38990776660870896, 34.2131809827965]];
//     seed = [[14, 12, 0.012536847557775496, 0.3209645209222223, 74.8125760444],
// [8, 9, 0.017220510363132133, 0.6914371633969845, 38.14614636563382],
// [7, 14, 0.03212401490409139, 0.6502897223909179, 23.245332571281],
// [17, 15, 0.038974248871176606, 0.5397965720321494, 0.9540756360263969],
// [6, 17, 0.033114648682022574, 0.06537843827734302, 9.205823874419705],
// [8, 16, 0.021018090344098343, 0.5366651809506267, 69.19043298301183]];
    seed = [[12, 17, 0.03061303956619825, 0.4664550826697489, 6.2931656994839935],
[17, 16, 0.006583977966302328, 0.3786367300508575, 48.690348607326804],
[11, 17, 0.03338663433667409, 0.7198834851175875, 30.645283170736498],
[7, 15, 0.012377403289131408, 0.8124879781426093, 27.801862135416634],
[9, 9, 0.03689722092125977, 0.05432243259081426, 15.713230155937996],
[17, 8, 0.024458084917171618, 0.5764001086491308, 36.29540463534803]];
    for (let i = 0; i < 6; i++) {
        let dna = new DNA();
        dna.branchingFrequencyLeft = seed[i][0];
        dna.branchingFrequencyRight = seed[i][1];
        dna.branchingCost = seed[i][2];
        let width = seed[i][3];
        let alpha = 1.0 - width;
        let x = map(i, 0, 5, -720/2, 720/2);
        let y = seed[i][4];
        tree = new Tree(x, y, dna, alpha, width);
    }
    scene.frameCount = 0;
    growthMax = 511;
    growth = true;
}